<script lang="ts">

  import {DataView, DataViewModule} from "primeng/dataview";
  import {FormsModule} from "@angular/forms";
  import {inject} from "@angular/core";
  import {SelectButton} from "primeng/selectbutton";
  import {AsyncPipe, CurrencyPipe, NgClass, NgOptimizedImage} from "@angular/common";
  import {Tag} from "primeng/tag";
  import {Divider} from "primeng/divider";
  import CardButton from "../../../components/card-button.analog";
  import {UserService} from "../../services/user.service";
  import GridItem from "../../../components/grid-item.analog";
  import {Button} from "primeng/button";
  import {DialogService, DynamicDialogConfig, DynamicDialogRef} from "primeng/dynamicdialog";
  import {FilterSettingsComponent} from "../../../components/filter-settings/filter-settings.component";
  import {ProductService} from "../../services/product.service";
  import {FilterService} from "../../services/filter.service";
  import {InputGroup} from "primeng/inputgroup";
  import {InputGroupAddon} from "primeng/inputgroupaddon";
  import {SearchService} from "../../services/search.service";
  import {InputText} from "primeng/inputtext";
  import {Chip} from "primeng/chip";
  import {UiService} from "../../services/ui.service";
  import {map} from "rxjs";

  defineMetadata({
    imports: [Button, AsyncPipe, NgOptimizedImage, DataView, DataViewModule, FormsModule, SelectButton, NgClass, Tag, CurrencyPipe, Divider, CardButton, GridItem, InputGroup, InputGroupAddon, InputText, Chip],
    providers: [DialogService]
  });

  const $products = inject(ProductService).$products;
  let options = ['list', 'grid'] as const;

  const userService = inject(UserService)
  const dialogService = inject(DialogService)
  const filterService = inject(FilterService)
  const searchService = inject(SearchService)
  const uiService = inject(UiService)

  const layoutOptions$ = uiService.isMobile$.pipe(
    map((mobile) => {
      if (mobile) {
        return ['grid']
      }
      return ['list', 'grid']
    })
  )

  let dialogRef: DynamicDialogRef | undefined;

  function show() {
    const config: DynamicDialogConfig<FilterSettingsComponent> = {
      header: 'Filtern',
      width: '50vw',
      modal: true,
      focusOnShow: false,
      closable: true,
      maximizable: false,
      breakpoints: {
        '960px': '75vw',
        '640px': '100vw'
      },
      height: window.visualViewport.width < 640 ? '100vh' : '80vh'
    }
    dialogRef = dialogService.open(FilterSettingsComponent, config);

    dialogRef.onClose.subscribe((kategorien: string[]) => {
      if (!kategorien) {
        return;
      }
      filterService.updateKategorien(kategorien)
    });

  }

  function removeKategorie(kategorie: string, event: Event) {
    event.stopImmediatePropagation();
    event.preventDefault();
    filterService.updateKategorien(filterService.$selectedKategorien().filter(k => k !== kategorie))
  }

</script>

<template>
  <p-data-view #dv class="dataview-content" [value]="$products()" [layout]="uiService.$viewMode()">
    <ng-template #header>
      <div class="dataviewheader">
        <div>
          <p-inputgroup class="searchgroup">
            <p-inputgroup-addon>
              <span class="material-symbols-outlined">search</span>
            </p-inputgroup-addon>
            <input pInputText [(ngModel)]="searchService.$searchword" placeholder="Suche"/>
          </p-inputgroup>
        </div>
        @if (filterService.$selectedKategorien().length > 0) {
          <div>
            @for (kategorie of filterService.$selectedKategorien(); track kategorie) {
              <p-chip class="chip" [label]="kategorie" [removable]="true"
                      (onRemove)="removeKategorie(kategorie, $event)"
                      (click)="show()"/>
            }
          </div>
        }
        <div class="btn-wrapper">
          <p-button [rounded]="true" severity="secondary" (click)="show()">
            <span class="material-symbols-outlined">tune</span>
          </p-button>
          <p-select-button size="small" [(ngModel)]="uiService.$viewMode" [options]="layoutOptions$ | async"
                           [allowEmpty]="false">
            <ng-template #item let-item>
              @if (item === 'list') {
                <span class="material-symbols-outlined">list</span>
              } @else {
                <span class="material-symbols-outlined">grid_view</span>
              }
            </ng-template>
          </p-select-button>
        </div>
      </div>
    </ng-template>
    <ng-template #list let-items>
      @for (item of items; let first = $first; track item) {
        @if (!first) {
          <p-divider class="divider"/>
        }
        <div class="zeilenwrapper">
          <div class="listen-zeile">
            <div class="relative image-wrapper">
              <img
                class="image"
                [src]="item.imageDataUrl ? item.imageDataUrl : 'https://picsum.photos/250/300'"
                [alt]="item.name"
              />
            </div>
            <div>
              <div>{{ item.name }} <span class="kategorie">- {{ item.category }}</span></div>
              <div class="text-lg font-medium text-surface-900 dark:text-surface-0 mt-2">
                {{ item.description }}
              </div>
            </div>
            <div>
              @if (userService.$loggedIn()) {
                <div>
                  <span>{{ item.price | currency: 'EUR' }}</span>
                </div>
                <div>
                  <card-button></card-button>
                </div>
              } @else {
                <div class="currency-only">
                  <span>{{ item.price | currency: 'EUR' }}</span>
                </div>
              }
            </div>
          </div>
        </div>
      }
    </ng-template>
    <ng-template #grid let-items>
      <grid-item [items]="items"></grid-item>
    </ng-template>
  </p-data-view>
</template>

<style>
  .searchgroup {
    width: 300px;
  }

  .zeilenwrapper {
    display: flex;
    justify-content: center;
  }

  .divider {
    --p-divider-horizontal-margin: 0.5rem 0;
    --p-divider-horizontal-padding: 0 0.5rem;
  }

  .chip:hover {
    cursor: pointer;
  }

  .image {
    border-radius: var(--p-border-radius-sm);
    width: 12rem;
    height: 12rem;
  }

  .kategorie {
    font-size: 0.75rem;
  }

  .dataview-content {
    --p-dataview-content-padding: 16px;
  }

  .dataviewheader {
    display: grid;
    justify-content: flex-end;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
  }

  .listen-zeile {
    max-width: 800px;
    display: grid;
    grid-template-columns: 250px 1fr 200px;
    min-width: 300px;
    width: 800px;
    justify-items: stretch;
  }

  .currency-only {
    display: grid;
    height: 100%;
    align-items: center;
  }

  .btn-wrapper {
    justify-self: flex-end;
    display: flex;
    gap: 1rem;

  }

  .currency-only span {
    font-size: 1.2rem;
  }

  .image-wrapper {
    height: 8rem;
    width: 10rem;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
  }

</style>
